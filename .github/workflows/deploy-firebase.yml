name: Deploy to Firebase Hosting

on:
  push:
    branches: [main]
    paths:
      - 'flutter_ui/**'
      - '.github/workflows/deploy-firebase.yml'
  workflow_call:
    inputs:
      artifact-name:
        description: 'Name of the Flutter build artifact'
        required: false
        type: string
        default: 'flutter-web-build'
    outputs:
      deployment-url:
        description: 'Firebase Hosting deployment URL'
        value: ${{ jobs.deploy-firebase.outputs.url }}

env:
  PROJECT_ID: chat-mbti-458210
  FLUTTER_VERSION: '3.7.2'
  NODE_VERSION: '18'

jobs:
  deploy-firebase:
    name: Deploy to Firebase Hosting
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./flutter_ui
    outputs:
      url: https://${{ env.PROJECT_ID }}.web.app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'

      - name: Install Flutter dependencies
        run: flutter pub get

      - name: Download Flutter build artifacts (if available)
        if: inputs.artifact-name != ''
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}
          path: flutter_ui/build/web/
        continue-on-error: true

      - name: Build Flutter web app for production
        run: |
          flutter build web --release \
            --web-renderer canvaskit \
            --base-href /

      - name: Deploy to Firebase Hosting
        run: |
          if [ ! -z "${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}" ]; then
            echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}' | base64 -d > ${HOME}/firebase-key.json
            export GOOGLE_APPLICATION_CREDENTIALS=${HOME}/firebase-key.json
            firebase deploy --only hosting --project ${{ env.PROJECT_ID }}
          elif [ ! -z "${{ secrets.FIREBASE_TOKEN }}" ]; then
            firebase deploy --only hosting --project ${{ env.PROJECT_ID }} --token "${{ secrets.FIREBASE_TOKEN }}"
          else
            echo "Error: No Firebase authentication found. Please set either FIREBASE_SERVICE_ACCOUNT_KEY or FIREBASE_TOKEN secret."
            exit 1
          fi

      - name: Output deployment URL
        run: |
          echo "ðŸš€ Deployed to: https://${{ env.PROJECT_ID }}.web.app"
