services:
  # Flutter Web Application
  flutter:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    develop:
      watch:
        - action: sync
          path: ./frontend/lib
          target: /app/lib
        - action: sync
          path: ./frontend/web
          target: /app/web
        - action: sync
          path: ./frontend/assets
          target: /app/assets
        - action: rebuild
          path: ./frontend/pubspec.yaml
    ports:
      - '3000:3000'
    environment:
      - FLUTTER_WEB_USE_SKIA=true
    restart: unless-stopped

  # API Backend
  chat-api:
    build:
      context: ./diagnosis-chat-api
      dockerfile: Dockerfile
    develop:
      watch:
        - action: sync
          path: ./diagnosis-chat-api/src
          target: /app/src
        - action: sync
          path: ./diagnosis-chat-api/config
          target: /app/config
        - action: rebuild
          path: ./diagnosis-chat-api/pyproject.toml
    command: >
      uvicorn app:app --host 0.0.0.0 --port 8000 --reload
    ports:
      - '8000:8000'
    environment:
      - PERSISTENCE_TYPE=sql
      - DB_CONNECTION_STRING=${DB_CONNECTION_STRING}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GOOGLE_APPLICATION_CREDENTIALS=/app/credentials.json
      - ENVIRONMENT=${ENVIRONMENT}
      - GCS_BUCKET_NAME=${GCS_BUCKET_NAME}
      - DB_APP_USER=${DB_APP_USER}
      - DB_APP_PASS=${DB_APP_PASS}
      - DB_ADMIN_USER=${DB_ADMIN_USER}
      - DB_ADMIN_PASS=${DB_ADMIN_PASS}
      - GOOGLE_CLOUD_PROJECT="chat-mbti-458210"
      - SUMMARY_API_URL=http://summary-api:10000
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./diagnosis-chat-api/src:/app/src
      - ./diagnosis-chat-api/config:/app/config
      - ./diagnosis-chat-api/firebase-adminsdk.json:/app/firebase-adminsdk.json
      - ${HOME}/.config/gcloud/application_default_credentials.json:/app/credentials.json
    restart: unless-stopped

  # summary-api:
  #   build:
  #     context: ./diagnosis-summary-api
  #     dockerfile: Dockerfile
  #   develop:
  #     watch:
  #       # Sync the working directory with the `/app` directory in the container
  #       - action: sync
  #         path: ./diagnosis-summary-api/
  #         target: /app
  #         # Exclude the project virtual environment
  #         ignore:
  #           - .venv/
  #       - action: rebuild
  #         path: ./pyproject.toml
  #   command: >
  #     uvicorn src.app:app --host 0.0.0.0 --port 10000 --reload --workers 1
  #   ports:
  #     - '10000:10000'
  #   environment:
  #     - GEMINI_API_KEY=${GEMINI_API_KEY}
  #     - GOOGLE_APPLICATION_CREDENTIALS=/app/credentials.json
  #     - ENVIRONMENT=${ENVIRONMENT}
  #     - HF_HOME=/workspace
  #   depends_on:
  #     - db
  #   volumes:
  #     - ${HOME}/.config/gcloud/application_default_credentials.json:/app/credentials.json
  #     - ./diagnosis-summary-api/src:/app/src
  #     - /app/.venv
  #     - ./diagnosis-summary-api/model:/workspace
  #   restart: unless-stopped

  # PostgreSQL Database
  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=diagnosis_ai
    ports:
      - '5432:5432'
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'postgres']
      interval: 1s
      timeout: 2s
      retries: 10

  # db-monitor:
  #   image: postgres:15
  #   volumes:
  #     - ./scripts/db-monitor.sh:/app/db-monitor.sh
  #   depends_on:
  #     - db
  #   environment:
  #     - PGHOST=db
  #     - PGUSER=postgres
  #     - PGPASSWORD=postgres
  #     - PGDATABASE=diagnosis_ai
  #   command: >
  #     bash /app/db-monitor.sh
volumes:
  postgres_data:
